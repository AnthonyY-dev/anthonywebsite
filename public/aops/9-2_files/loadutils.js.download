AoPS.Utils.initKeyChain(AoPS, "LoadUtils");

// Made by Palmer, for Palmer
// TODO: document

AoPS.LoadUtils = (function (LoadUtils) {
	// Dependencies
	var Utils = AoPS.Utils;

	// A loader receiving one of these error codes should allow future load
	// requests to go through.
	var RETRY_ERROR_CODES = [
		"E_LOAD_INTERRUPT",
		"E_AJAX_TIMEOUT",
		"E_AJAX_UNKNOWN",
		"E_AJAX_FILTERED",
		"E_SESSION_ENDED",
	];

	// Always return a callable function (a no-op if passed parameter was not a
	// function), bound to the context if any. Convenience function to save on
	// error checking.
	function makeCallback(callback, context) {
		if (!_.isFunction(callback)) {
			return function () {};
		} else if (context) {
			return _.bind(callback, context);
		}
		return callback;
	}
	LoadUtils.makeCallback = makeCallback;

	LoadUtils.LoadManager = Utils.Class.extend({
		// Options is an object. Only required key is loadHandler. loadHandler is
		// a function that takes a callback as its argument, and this callback takes
		// (ok, data) as its arguments. The loadHandler is usually where the AJAX call
		// happens.
		// Other keys:
		//   context - loadHandler is bound to this. Optional.
		//   cache_data - set to true if future requestLoad callbacks need the data
		//     parameter given to the one originally fired. Defaults to false.
		initialize: function (options) {
			this.cache_data = !!options.cache_data;

			// Tracks state of loader
			this.load_ok = null;
			this.load_data = {};
			this.is_loading_now = false;
			this.is_load_finished = false;

			// requestLoad callbacks to be fired when loading finishes.
			this.callback_list = [];

			this.loadHandler = makeCallback(options.loadHandler, options.context);
		},

		// Go through the list of callbacks. Internal helper function.
		processCallbacks: function (ok, data) {
			var callback;
			while (this.callback_list.length) {
				callback = this.callback_list.pop();
				callback(ok, data);
			}
		},

		// Used as loadHandler's callback. Internal helper function.
		processHandlerResult: function (ok, data) {
			ok = !!ok;
			data = data || {};

			// We are still loading, right?
			if (!this.is_loading_now) {
				if (this.load_ok) {
					// Load was interrupted by markAsLoaded; callbacks already processed.
					return;
				}

				// Load was interrupted by forceReload
				ok = false;
				data = {
					error_code: "E_LOAD_INTERRUPT",
					error_msg:
						"The load request was interrupted by a separate call " +
						"to forceReload.",
				};
			}

			this.markAsLoaded(ok, data);
		},

		// Return whether a load has started and finished.
		isLoaded: function () {
			return !!this.load_ok;
		},

		// Set the loader flags marking it as done.
		markAsLoaded: function (ok, data) {
			this.load_ok = ok;
			if (this.cache_data && data) {
				this.load_data = data;
			}

			this.is_loading_now = false;
			// Unless we got an error code we should retry for, loading is done.
			if (!data || !_.contains(RETRY_ERROR_CODES, data.error_code)) {
				this.is_load_finished = true;
			}

			// Make sure we always do callbacks asynchronously.
			var processCallbacks = _.bind(this.processCallbacks, this);
			setTimeout(function () {
				processCallbacks(ok, data);
			}, 0);
		},

		// Even if a load already finished, pretend it never happened.
		forceReload: function () {
			this.load_ok = null;
			this.load_data = {};
			this.is_loading_now = false;
			this.is_load_finished = false;
		},

		// The main function. Ask for a load to start, and provide a callback
		// (with optional context) to call when it finishes. Only one attempt
		// to load is actually made, and all pending callbacks fire when it is
		// done. Calling this function when loading is already done means the
		// given callback will fire on the next tick.
		requestLoad: function (callback, context) {
			callback = makeCallback(callback, context);

			if (this.is_load_finished) {
				// Always call back asynchronously.
				var ok = this.load_ok;
				var data = this.load_data;
				setTimeout(function () {
					callback(ok, data);
				}, 0);
				return;
			}

			this.callback_list.push(callback);
			// First request? Initiate the loading sequence.
			if (!this.is_loading_now) {
				this.is_loading_now = true;
				this.loadHandler(_.bind(this.processHandlerResult, this));
			}
		},
	});

	// A load manager for multiple related loads taking a single parameter.
	// This parameter should be convertable to a string/object key without loss
	// of information.
	//
	// The assumption is that only one piece of data managed by these loaders
	// is shown at a time. Therefore, only two requests are remembered; the
	// currently processing one, and the last one made that hasn't started.
	// The rest get sent an interrupt notice, which can probably be ignored.
	LoadUtils.SingleLoadQueue = Utils.Class.extend({
		// Options is an object. Only required key is loadHandler. loadHandler is
		// a function that takes the parameter and a callback as its arguments.
		// This callback takes (ok, data) as its arguments.
		// The other options work like they do for the basic load manager.
		initialize: function (options) {
			this.cache_data = !!options.cache_data;

			// Tracks state of loader
			this.load_results = {};
			this.current_loader = null; // LoadManager object
			this.current_node = null; // param, callback keys
			this.waiting_node = null; // param, callback keys

			this.loadHandler = makeCallback(options.loadHandler, options.context);
		},

		// Pass a node about to be processed. If it is already loaded,
		// the callback is fired appropriately and true is returned.
		// Else, false is returned. Internal helper function.
		isNodeAlreadyDone: function (node) {
			if (!node) {
				return;
			}

			var prev_result = this.load_results[node.param];
			if (prev_result) {
				// Make sure we always call asynchronously.
				setTimeout(function () {
					node.callback(prev_result.ok, prev_result.data);
				}, 0);
				return true;
			}
			return false;
		},

		// If there is no currently processing node, but one is waiting, get the
		// waiting one started. Internal helper function.
		processQueue: function () {
			if (this.current_node || !this.waiting_node) {
				return;
			}
			// The node we'll now start executing.
			var node = this.waiting_node;

			if (this.isNodeAlreadyDone(node)) {
				// ... or not; it's already done too.
				node = null;
				return;
			}

			// Pop from our (2-element) queue
			this.current_node = node;
			this.waiting_node = null;

			var param = node.param;
			this.current_loader = new LoadUtils.LoadManager({
				loadHandler: _.partial(this.loadHandler, param),
				cache_data: false,
			});
			// Before the callback, flag ourself as loaded for the parameter.
			this.current_loader.requestLoad(_.bind(this.markAsLoaded, this, param));
			this.current_loader.requestLoad(node.callback);
		},

		// Push node onto the waiting position of the queue.
		// If it knocks something else off, send an interrupt notice to it.
		// If parameter matches the current loader, just attach the callback to
		// the existing loader.
		// processQueue is what moves nodes from waiting to current.
		pushNode: function (node) {
			if (this.current_node && node.param === this.current_node.param) {
				this.current_loader.requestLoad(node.callback);
				return;
			}

			if (this.waiting_node) {
				this.waiting_node.callback(false, {
					error_code: "E_LOAD_INTERRUPT",
					error_msg:
						"The load request was cancelled by a later request " +
						"before it could start.",
				});
			}
			this.waiting_node = node;
		},

		// Get the load status for a particular parameter.
		isLoaded: function (param) {
			var result = this.load_results[param];
			return result && !!result.ok;
		},

		// Set the loader flags marking it as done.
		markAsLoaded: function (param, ok, data) {
			// Store the result of the load.
			var result = {ok: ok};
			if (this.cache_data && data) {
				result.data = data;
			}
			this.load_results[param] = result;

			// Is this parameter the load going on now?
			// (Note this is the way for a current load that just finished to
			// continue through the queue.)
			if (this.current_node && this.current_node.param === param) {
				this.current_loader.markAsLoaded(ok, data);
				this.current_loader = null;
				this.current_node = null;
				this.processQueue();
			}
		},

		// Even if a certain load already finished, pretend it never happened.
		forceReload: function (param) {
			delete this.load_results[param];

			// Is this parameter the load going on now?
			if (this.current_node && this.current_node.param === param) {
				this.current_loader.forceReload();
				this.current_loader = null;
				this.current_node = null;
				this.processQueue();
			}
		},

		// Erase evidence of all completed loads.
		forceReloadAll: function () {
			this.load_results = {};

			if (this.current_node && this.current_loader) {
				this.current_loader.forceReload();
			}
			this.current_loader = null;
			this.current_node = null;
			this.waiting_node = null;
		},

		// The main function. Ask for a load with the given parameter to start,
		// and provide a callback (with optional context) to call when it finishes.
		// Only one parameter will be loaded at a time. Requesting other loads
		// will "queue" them up behind the currently running one, except this
		// queue has maximum length 1; a new request will replace an old one,
		// and the old one's callback will be notified appropriately.
		requestLoad: function (param, callback, context) {
			var node = {
				callback: LoadUtils.makeCallback(callback, context),
				param: param,
			};

			if (!this.isNodeAlreadyDone(node)) {
				this.pushNode(node);
				this.processQueue();
			} else {
				// Do nothing. isNodeAlreadyDone handled things for us.
			}
		},
	});

	// A mixin for models, which exposes a setLoader method that one can use
	// to set a LoadManager for the model, and then exposes all LoadManager
	// methods (requestLoad, isLoaded, forceReload, markAsLoaded) on the model
	// directly.
	// No corresponding mixin for SingleLoadQueue; that has to be done manually.
	LoadUtils.LoaderMixin = {
		// Pass in a LoadUtils.LoadManager instance.
		setLoader: function (new_loader) {
			this.loader = new_loader;
		},
		requestLoad: function (callback, context) {
			this.loader && this.loader.requestLoad(callback, context);
			return !!this.loader;
		},
		isLoaded: function () {
			return this.loader && this.loader.isLoaded();
		},
		forceReload: function () {
			this.loader && this.loader.forceReload();
			return !!this.loader;
		},
		markAsLoaded: function (ok, data) {
			this.loader && this.loader.markAsLoaded(ok, data);
			return !!this.loader;
		},
	};

	return LoadUtils;
})(AoPS.LoadUtils);
