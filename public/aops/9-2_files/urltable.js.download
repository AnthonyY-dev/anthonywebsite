AoPS.Utils.initKeyChain(AoPS, "UrlTable");

// Made by Palmer, for Palmer
// TODO: document

AoPS.UrlTable = (function (UrlTable) {
	// Dependencies
	var Utils = AoPS.Utils;

	UrlTable.Table = Utils.Class.extend({
		// Backbone's URL parameters are a colon or asterisk followed by characters without slashes
		param_pattern: /[:\*][^\/]+/,

		initialize: function (params) {
			this.url_data = params.data;
			this.root_url = params.root_url || "#";
			this.image_path = params.image_path || "";
		},

		setRoot: function (new_root) {
			this.root_url = new_root;
		},

		getRoot: function () {
			return this.root_url;
		},

		// Get a URL with parameters filled in by passing in the code followed by
		// the value of each parameter in order.
		// There are two ways to call this function: either pass a single array
		// (like in .apply), or pass in multiple arguments with the first one the
		// code (like in .call).
		getUrl: function (url_args) {
			var args = _.isArray(url_args) ? url_args : _.toArray(arguments);
			var code = args[0];
			var url = this.getUrlPattern(code);
			var param_pattern = this.param_pattern;

			if (url) {
				_.each(args.slice(1), function (param) {
					url = url.replace(param_pattern, param, url);
				});
			}
			return url;
		},

		// Same as getUrl, but omit the root part of the URL.
		getUrlWithoutRoot: function (url_args) {
			var args = _.isArray(url_args) ? url_args : _.toArray(arguments);
			var code = args[0];
			var url = this.getUrlPattern(code, true);
			var param_pattern = this.param_pattern;

			if (url) {
				_.each(args.slice(1), function (param) {
					url = url.replace(param_pattern, param, url);
				});
			}
			return url;
		},

		// Get the unparsed URL pattern, including the root part unless explicitly
		// told otherwise.
		getUrlPattern: function (code, no_root) {
			var real_root = no_root ? "" : this.root_url;
			if (this.url_data.hasOwnProperty(code)) {
				return real_root + this.url_data[code];
			}
		},

		getImage: function (name) {
			return this.image_path + name;
		},

		// Match the given URL with the patterns in the URL table. Return null if
		// the match failed, else return an array whose first element is the code
		// and remaining elements are the parameters. This array could be passed to
		// getUrl.
		// Only available if Backbone was loaded; if not, it always returns null.
		matchUrl: function (url, no_root) {
			if (!Backbone || !Backbone.Router) {
				return null;
			}

			url = url || "";

			// Deal with root URL issues
			var my_root_url;
			if (!no_root) {
				my_root_url = url.slice(0, this.root_url.length);
				if (my_root_url !== this.root_url) {
					return null;
				}
				url = url.slice(this.root_url.length);
			}

			// Find the URL pattern that matches.
			var regexp_table = _.map(this.url_data, function (bb_route, code) {
				return [code, Backbone.Router.prototype._routeToRegExp(bb_route)];
			});
			var match = _.find(regexp_table, function (row) {
				return row[1].test(url);
			});
			if (!match) {
				return null;
			}

			// Construct the return value.
			var params = Backbone.Router.prototype._extractParameters(match[1], url);
			params.unshift(match[0]);
			return params.slice(0, -1);
		},
	});

	return UrlTable;
})(AoPS.UrlTable);
