AoPS.Utils.initKeyChain(AoPS, "Grid", "Views");

AoPS.Grid.Views = (function (Views) {
	Views.GridTabCodeOlympiad = Views.GridTab.extend({
		template_id: "#grid-tab-cs-test-tab-tpl",
		onAddToPage: function (obj) {
			if (obj.args.join("/") != this.options.args.join("/")) {
				if (obj.args.length > 0) {
					this.options.args = obj.args;
					this.render();
				} else {
					Backbone.history.navigate(
						this.options.history_tab_url +
							"/" +
							this.options.args.join("/") +
							this.options.user_string,
						{replace: true}
					);
					return;
				}
			}
		},
		loadFirst: function (success) {
			// I should d this to show that a quiz is not ready
			// if (!this.model.get("master").get("grid_data").config.homework_active) {
			// 	this.vars.is_active = false;
			// }

			// If no test number is URL, then just got to the first test
			this.vars.lesson = _.isUndefined(this.options.args[0])
				? 1
				: parseInt(this.options.args[0]);

			this.vars.num_tests = _.range(
				1,
				this.model.get("max_lesson") - this.model.get("max_disp_schedule") + 1
			);

			if (
				this.vars.lesson > this.vars.num_tests.length ||
				this.vars.lesson < 0
			) {
				this.vars.lesson = 1;
			}

			this.true_lesson = this.model.get("max_disp_schedule") + this.vars.lesson;
			this.lesson_schedule = this.model.get("my_schedule")[this.true_lesson];
			if (this.lesson_schedule && this.lesson_schedule.released_at) {
				this.is_active = true;
			} else {
				this.is_active = false;
			}

			this.model.get("master").getCodeOlympiadTestData(
				{
					lesson: this.true_lesson,
				},
				_.bind(function () {
					this.render(true);
				}, this)
			);
		},
		prerenderHelper: function () {
			// this.model.get('master').getCodeOlympiadTestData({lesson: this.vars.lesson});
			this.vars.class_id = this.model.get("class_id");
		},
		renderHelper: function () {
			this.$main = this.$(".main");
			this.cs_test = this.model.get("master").get("cs_test");
			this.$("span[lesson=" + this.vars.lesson + "]")
				.find("a")
				.addClass("selected");

			if (!this.cs_test || !this.cs_test.started_at) {
				this.renderHonorCode();
			} else {
				this.renderTest();
			}
		},
		renderHonorCode: function () {
			var honor = new Views.GridTabCodeOlympiadHonorCode({
				model: this.model,
				parentView: this,
			});
			this.honorView = {
				view: honor,
			};
			this.$main.append(honor.$el);
			honor.render(true);
		},
		renderTest: function () {
			this.$main.empty();
			var test = new Views.GridTabCodeOlympiadTest({
				model: this.model,
				parentView: this,
			});
			this.testView = {
				view: test,
			};
			this.$main.append(test.$el);
		},
	});

	Views.GridTabCodeOlympiadHonorCode = Views.GridTab.extend({
		template_id: "#grid-tab-cs-test-difficulty-tpl",
		className: "difficulty-main",
		events: {
			"click .difficulty": "updateDifficulty",
			"click .honor-accept": "updateSubmit",
			"click .start-test": "submit",
		},
		renderHelper: function () {
			this.$error = this.$(".error-container");
			this.$difficulty = this.$(".difficulty");
		},
		submit: function (e) {
			e.preventDefault();

			if (!this.options.parentView.is_active) {
				this.showError(
					"Test not available yet. Test to release on " +
						this.options.parentView.lesson_schedule.to_release_at_fmt
				);
			} else {
				if (!this.difficulty && !this.honor) {
					this.showError(
						"Please choose a difficulty and accept the honor code"
					);
				} else if (!this.difficulty) {
					this.showError("Please choose a difficulty");
				} else if (!this.honor) {
					this.showError("Please accept the honor code");
				} else {
					this.startTest();
				}
			}
		},
		updateDifficulty: function (e) {
			this.$difficulty.removeClass("selected");
			$(e.currentTarget).addClass("selected");

			this.difficulty = $(e.currentTarget).attr("value");

			this.updateSubmit();
		},
		updateSubmit: function () {
			this.honor = $(".honor-accept").is(":checked");
			if (this.honor && this.difficulty && this.options.parentView.is_active) {
				$(".start-test").removeClass("disabled");
			} else {
				$(".start-test").addClass("disabled");
			}
		},
		showError: function (str) {
			this.$error.empty();
			this.$error.text(str);
		},
		startTest: function () {
			this.model.get("master").startCodeOlympiadTest(
				{
					lesson: this.options.parentView.true_lesson,
					difficulty: this.difficulty,
				},
				_.bind(function () {
					this.options.parentView.renderTest();
				}, this)
			);
		},
	});

	Views.GridTabCodeOlympiadTest = Views.GridTab.extend({
		template_id: "#grid-tab-cs-test-questions-tpl",
		loadFirst: function (success) {
			this.vars.lesson = this.options.parentView.true_lesson;
			this.difficulty = parseInt(
				this.model.get("master").get("cs_test").difficulty
			);

			var difficulty_split = [1, 3, 5, 7];
			this.question_min = difficulty_split[this.difficulty - 1];
			this.question_max = difficulty_split[this.difficulty];

			this.model.get("master").executeWhenHomeworkLoaded(
				{
					lesson: this.vars.lesson,
					display: 1,
				},
				_.bind(function () {
					success();
				}, this)
			);
		},
		renderHeader: function () {
			this.$plist_hdr.html("");
			var started_at = this.model.get("master").get("cs_test").started_at;
			var ended_at = this.model.get("master").get("cs_test").ended_at;
			// The first time the olympaid is started, started_at is an object, for subsequent loads it is a string
			if (started_at && ended_at) {
				started_at = started_at.date ? started_at.date : started_at;
				ended_at = ended_at.date ? ended_at.date : ended_at;
			}
			if (started_at !== ended_at) {
				this.$plist_hdr.append(
					$("<span />")
						.addClass("right")
						.text(
							"Total Score: " +
								(this.lesson.get("sum_pts_earned") + 1) +
								" / 1000"
						)
				);
			}
		},
		prerenderHelper: function () {
			if (_.isUndefined(this.allProblemViews)) {
				this.allProblemViews = new Backbone.Collection();
			}

			if (!_.isUndefined(this.weeklyProblemViews)) {
				_.each(this.weeklyProblemViews, function (pv) {
					pv.$el.detach();
				});
			}
			this.weeklyProblemViews = [];

			if (
				_.isUndefined(
					(this.lesson = this.model
						.get("hw_lessons")
						.findWhere({lesson: this.vars.lesson}))
				)
			) {
				this.lesson = this.model.get("hw_lessons").findWhere({lesson: 13});
				this.vars.lesson = 13;
			}
			this.options.args[0] = this.vars.lesson;
		},
		renderHelper: function () {
			this.$plist_hdr = this.$(".problem-list-header");
			this.$countdown_head = this.$(".countdown-head");
			this.$countdown_foot = this.$(".countdown-foot");
			this.$inner = this.$(".inner");
			this.$copyright = this.$(".copyright-notice");
			this.renderHeader();
			this.listenTo(
				this.model,
				"report_has_changed",
				_.bind(function () {
					this.renderHeader();
				}, this)
			);
			this.renderProblems();
		},
		renderProblems: function () {
			if (_.isUndefined(this.debouncedUpdateHasChanged)) {
				this.debouncedUpdateHasChanged = _.debounce(
					_.bind(this.updateHasChanged, this),
					500
				);
			}

			var countdown = new Views.GridTabCodeOlympiadCountdown({
				model: this.model,
				parentView: this,
			});
			this.countdownView = {
				view: countdown,
			};
			this.$countdown_head.append(countdown.$el);
			// this.$countdown_foot.append(countdown.$el);
			countdown.render(true);

			this.hw_problems = this.lesson.get("hw_problems");

			if (this.hw_problems.length) {
				this.hw_problems.each(
					_.bind(function (problem) {
						if (
							this.model.get("master").get("cs_test").ended_at ||
							(this.question_min <= problem.get("order") &&
								problem.get("order") <= this.question_max)
						) {
							var found = this.allProblemViews.findWhere({
								problem_id: problem.get("problem_id"),
							});
							if (found) {
								this.$inner.append(found.get("view").$el);
								this.weeklyProblemViews.push(found.get("view"));
							} else {
								var viewModel =
									Views.GridTabAssignmentsCronus ||
									Views.GridTabAssignmentsProblem;
								var view = new viewModel({
									model: problem,
									parentView: this,
									is_test: true,
								});
								this.allProblemViews.add({
									problem_id: problem.get("problem_id"),
									view: view,
								});
								this.weeklyProblemViews.push(view);
								this.$inner.append(view.$el);
								view.render(true);
							}
						}
					}, this)
				);
				this.updateHasChanged();
				this.$copyright.show();
			} else {
				this.$plist_hdr.hide();
			}
		},
		updateHasChanged: function () {
			this.model.get("master").resetNagController();
			_.each(
				this.weeklyProblemViews,
				_.bind(function (pv) {
					var freeResponse = pv.problemSubViews["FreeResponse"];
					if (pv.problemSubViews && freeResponse) {
						if (freeResponse.editing && freeResponse.hasChanged()) {
							this.model.get("master").setNagController({
								should_nag: true,
								$scroll:
									this.model.get("master").get("nag_controller").$scroll ||
									pv.$el,
							});
						}
					}

					var shortAnswer = pv.problemSubViews["ShortAnswer"];
					if (pv.problemSubViews && shortAnswer) {
						if (
							shortAnswer.isNotEmpty() &&
							shortAnswer.hasChanged() &&
							!shortAnswer.model.get("done_at")
						) {
							this.model.get("master").setNagController({
								should_nag: true,
								$scroll:
									this.model.get("master").get("nag_controller").$scroll ||
									pv.$el,
							});
						}
					}

					var physics = pv.problemSubViews["Physics"];
					if (pv.problemSubViews && physics) {
						if (
							physics.isNotEmpty() &&
							physics.hasChanged() &&
							!physics.model.get("done_at")
						) {
							this.model.get("master").setNagController({
								should_nag: true,
								$scroll:
									this.model.get("master").get("nag_controller").$scroll ||
									pv.$el,
							});
						}
					}

					var matrixOrVector = pv.problemSubViews["MatrixOrVector"];
					if (pv.problemSubViews && matrixOrVector) {
						if (
							matrixOrVector.isNotEmpty() &&
							matrixOrVector.hasChanged() &&
							!matrixOrVector.model.get("done_at")
						) {
							this.model.get("master").setNagController({
								should_nag: true,
								$scroll:
									this.model.get("master").get("nag_controller").$scroll ||
									pv.$el,
							});
						}
					}

					var motor = pv.problemSubViews["Motor"];
					if (pv.problemSubViews && motor) {
						if (
							motor.isNotEmpty() &&
							motor.hasChanged() &&
							!motor.model.get("done_at")
						) {
							this.model.get("master").setNagController({
								should_nag: true,
								$scroll:
									this.model.get("master").get("nag_controller").$scroll ||
									pv.$el,
							});
						}
					}
				}, this)
			);
		},
		finishTest: function () {
			// Finalize each problem that is shown
			if (this.allProblemViews.length) {
				this.allProblemViews.each(
					_.bind(function (problem) {
						problem.get("view").model.respond("", true);
					}, this)
				);
			}
			var opts = {lesson: this.options.parentView.true_lesson};
			this.model.get("master").finishCodeOlympiadTest(
				opts,
				_.bind(function () {
					location.reload();
				}, this)
			);
		},
	});

	Views.GridTabCodeOlympiadCountdown = Views.GridTab.extend({
		template_id: "#grid-tab-cs-test-countdown-tpl",
		className: "countdown-main",
		events: {
			"click .finish-test": "finishTest",
		},
		initialize: function (options) {
			this.options = options;
			this.vars.ended = this.model.get("master").get("cs_test").ended_at;
		},
		renderHelper: function () {
			if (!this.vars.ended) {
				var endTime = this.model.get("master").get("cs_test").end_time;
				setTimeout(
					_.bind(function () {
						this.updateCountdownTimer($(".countdown-container"), endTime);
					}, this),
					0
				);
			}
		},
		updateCountdownTimer: function ($el, endTime) {
			var countdownInterval = setInterval(
				_.bind(function () {
					//use moment to get difference between now and end time in milliseconds
					var now = moment();
					var remainingTime = endTime.diff(now);

					if (remainingTime < 0) {
						this.options.parentView.finishTest();
						clearInterval(countdownInterval);
					} else {
						var countDownTime = this.parseUnixTimeToCountdown(remainingTime);
						_.each($el.find("div.time"), function (unit, unitIndex) {
							_.each($(unit).find("span"), function (digit, digitIndex) {
								$(digit).text(countDownTime[unitIndex][digitIndex]);
							});
						});
					}
				}, this),
				1000
			);
		},
		parseUnixTimeToCountdown: function (countdownTime) {
			if (countdownTime < 0) {
				return Array(4).fill(["0", "0"]);
			}

			var hours = `${Math.floor(countdownTime / (1000 * 60 * 60))}`;
			countdownTime %= 1000 * 60 * 60;
			var minutes = `${Math.floor(countdownTime / (1000 * 60))}`;
			countdownTime %= 1000 * 60;
			var seconds = `${Math.floor(countdownTime / 1000)}`;

			var hourDigits = hours.split("");
			var minuteDigits = minutes.split("");
			var secondDigits = seconds.split("");

			if (hourDigits.length > 2) {
				hourDigits = ["2", "4"];
			} else if (hourDigits.length === 1) {
				hourDigits = ["0", hourDigits[0]];
			} else if (hourDigits.length <= 0) {
				hourDigits = ["0", "0"];
			}

			if (minuteDigits.length > 2) {
				minuteDigits = ["6", "0"];
			} else if (minuteDigits.length === 1) {
				minuteDigits = ["0", minuteDigits[0]];
			} else if (minuteDigits.length <= 0) {
				minuteDigits = ["0", "0"];
			}
			if (secondDigits.length > 2) {
				secondDigits = ["6", "0"];
			} else if (secondDigits.length === 1) {
				secondDigits = ["0", secondDigits[0]];
			} else if (secondDigits.length <= 0) {
				secondDigits = ["0", "0"];
			}

			return [hourDigits, minuteDigits, secondDigits];
		},
		finishTest: function () {
			this.options.parentView.finishTest();
		},
	});

	return Views;
})(AoPS.Grid.Views);
